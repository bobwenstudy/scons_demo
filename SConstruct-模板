import os


def get_path_files(dirs, file_ext):
    path_files = []
    # print('dir: ' + str(dirs))
    for dir in dirs:
        # print('dir: ' + dir)
        path_files.append(Glob(dir + '/' + file_ext))
    return path_files


GCC_ARM_PATH = 'D:/env/gcc-arm-none-eabi-4_8-2014q3-20140805-win32'

#PLF = 'arm'
PLF = ''

# toolchains
if PLF == 'arm':
    PREFIX = GCC_ARM_PATH + '/bin/arm-none-eabi-'
else:
    PREFIX = ''

CC = PREFIX + 'gcc'
AS = PREFIX + 'as'
AR = PREFIX + 'ar'
CXX = PREFIX + 'g++'
LINK = PREFIX + 'ld'

SIZE = PREFIX + 'size'
OBJDUMP = PREFIX + 'objdump'
OBJCPY = PREFIX + 'objcopy'


TARGET_PATH = 'build/'
TARGET_NAME = 'main'
TARGET_WITHOUT_SUFFIX = TARGET_PATH + TARGET_NAME


###################################################################################
# C source dirs config
C_DIRS = []
#C_DIRS.append('src')

# C source files config
C_FILES = []
#C_FILES.append('main.c')

# Create c sources list
C_SRC_LIST = get_path_files(C_DIRS, '*.c') + C_FILES


###################################################################################
# ASM source dirs config
AS_DIRS = []
#AS_DIRS.append('src')

# ASM source files config
AS_FILES = []
#AS_FILES.append('startup.s')

AS_SRC_LIST = get_path_files(AS_DIRS, '*.s') + AS_FILES


###################################################################################
# -I, Include path config
CPP_PATH = []
#CPP_PATH.append('inc')

# -D, Preprocess Define
CPP_DEFINES = []
#CPP_DEFINES.append('CFG_TEST')

# C generate define
C_FLAGS = []
C_FLAGS.append('-O1')
C_FLAGS.append('-g')
C_FLAGS.append('-std=c99')

# C and C++ generate define
CC_FLAGS = []
CC_FLAGS.append('-Wall')


# ASM generate define
AS_FLAGS = []
AS_FLAGS.append('-g')




# Link Config
LINK_FLAGS = []
#LINK_FLAGS.append('-Wl,â€“gc-sections')


# lib path.
LIB_PATH = []
#LIB_PATH.append('lib')


# .lib, .a file
LIBS_FILES = []
#LIBS_FILES.append('test')

# spec ld flag. Arm spec.
SPEC_LD_FLAGS = []
if PLF == 'arm':
    SPEC_LD_FLAGS.append('-Map')
    SPEC_LD_FLAGS.append(TARGET_WITHOUT_SUFFIX + '.map')
    SPEC_LD_FLAGS.append('-T' + 'src/map_ram.txt')


env = Environment()

###################################################################################
# Step0: toolchains setting.
if PLF == 'arm':
    env['CC'] = CC
    env['AS'] = AS
    env['AR'] = AR
    env['CXX'] = CXX
    env['LINK'] = LINK

    env['OBJSUFFIX'] = '.o'
    env['LIBPREFIX'] = 'lib'
    env['LIBSUFFIX'] = '.a'
    env['PROGSUFFIX'] = '.elf'

###################################################################################
# Step1: C compile setting. use <print(env.Dump())> for details.
# 'CCCOM': '$CC -o $TARGET -c $CFLAGS $CCFLAGS $_CCCOMCOM $SOURCES'

# Step1.0: General options, like: optim/debug setting. $CFLAGS.
env.Append(CFLAGS=C_FLAGS)

# Step1.1: General options, other setting. $CCFLAGS.
env.Append(CCFLAGS=CC_FLAGS)

# Step1.2: -D, -I, setting. $_CCCOMCOM
# '_CCCOMCOM': '$CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS'
# StepX.2.0: CPPFLAGS setting. --- do nothing.
# StepX.2.1: -D setting. 
# 'CPPDEFPREFIX': '-D'
# '_CPPDEFFLAGS': '${_defines(CPPDEFPREFIX, CPPDEFINES, CPPDEFSUFFIX, __env__, '
#                 'TARGET, SOURCE)}',
env.Append(CPPDEFINES=CPP_DEFINES)
# Step1.2.2: -I setting. 
# 'INCPREFIX': '-I'
# '_CPPINCFLAGS': '${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, '
#                 'TARGET, SOURCE, affect_signature=False)}',
env.Append(CPPPATH=CPP_PATH)

###################################################################################
# Step2: ASM compile setting. use <print(env.Dump())> for details.
# 'ASCOM': '$AS $ASFLAGS -o $TARGET $SOURCES'

# Step2.0: General options. $ASFLAGS.
env.Append(ASFLAGS=AS_FLAGS)


###################################################################################
# Step3: LINK setting. use <print(env.Dump())> for details.
# 'LINKCOM': '$LINK -o $TARGET $LINKFLAGS $__RPATH $SOURCES $_LIBDIRFLAGS '
#            '$_LIBFLAGS',

# Step3.0: General options. $LINKFLAGS.
env.Append(LINKFLAGS=LINK_FLAGS)

# Step3.1: Link path setting. $_LIBDIRFLAGS.
# '_LIBDIRFLAGS': '${_concat(LIBDIRPREFIX, LIBPATH, LIBDIRSUFFIX, __env__, '
#                 'RDirs, TARGET, SOURCE, affect_signature=False)}',
env.Append(LIBPATH=LIB_PATH)

# Step3.2: libs setting, like *.a, *.lib. $_LIBFLAGS.
#   '_LIBFLAGS': '${_stripixes(LIBLINKPREFIX, LIBS, LIBLINKSUFFIX, LIBPREFIXES, '
#                'LIBSUFFIXES, __env__)}',
env.Append(LIBS=LIBS_FILES)

# Step3.3: Add some spec params. must append at end.
env.Append(_LIBFLAGS=SPEC_LD_FLAGS)


###################################################################################
# Step4: Compile Object files, use:
#        1. <$CCCOM>: For c code compile
#        2. <$ASCOM>: For asm code compile
c_objs = env.Object(C_SRC_LIST)
as_objs = env.Object(AS_SRC_LIST)



###################################################################################
# Step5: Compile target <.elf>, use <$LINKCOM>.
target = env.Program(target = TARGET_WITHOUT_SUFFIX, source=[c_objs, as_objs])

# Other compile target.
env.Command(TARGET_WITHOUT_SUFFIX + '.bin', target, OBJCPY + ' -v -O binary $SOURCE $TARGET')
env.Command(TARGET_WITHOUT_SUFFIX + '.lst', target, OBJDUMP + ' --source --all-headers --demangle --line-numbers --wide $SOURCE > $TARGET')
env.Command(TARGET_WITHOUT_SUFFIX + '.size', target, SIZE + ' --format=berkeley $SOURCE')

# Dump() env params, if need.
#print(env.Dump())



